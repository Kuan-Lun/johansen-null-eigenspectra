use johansen_null_eigenspectra::rng_matrix::gen_normal_matrix;

fn assert_vec_option_f64_approx_eq(a: &[f64], b: &[f64], eps: f64) {
    assert_eq!(
        a.len(),
        b.len(),
        "Length mismatch: {} vs {}",
        a.len(),
        b.len()
    );
    for (i, (opt, val)) in a.iter().zip(b.iter()).enumerate() {
        assert!(
            (opt - val).abs() < eps,
            "Values at index {} differ: {} vs {} (eps: {})",
            i,
            opt,
            val,
            eps
        );
    }
}

fn interpolated_cdf_sorted(data_sorted: &[f64], query_sorted: &[f64]) -> Vec<f64> {
    let n = data_sorted.len();
    let m = query_sorted.len();
    if n == 0 {
        return vec![f64::NAN; m];
    }

    let mut result = Vec::with_capacity(m);
    let mut i = 0;
    for &x in query_sorted {
        if x <= data_sorted[0] {
            result.push(0.0);
            continue;
        }
        if x >= data_sorted[n - 1] {
            result.push(1.0);
            continue;
        }
        while i + 1 < n && data_sorted[i + 1] <= x {
            i += 1;
        }
        let x0 = data_sorted[i];
        let x1 = data_sorted[i + 1];
        let cdf0 = i as f64 / n as f64;
        let cdf1 = (i + 1) as f64 / n as f64;
        let weight = (x - x0) / (x1 - x0);
        let cdf = cdf0 * (1.0 - weight) + cdf1 * weight;
        result.push(cdf);
    }
    result
}

#[test]
fn test_gen_normal_matrix_cdf() {
    let nrows = 200;
    let ncols = 300;
    let seed: u64 = 42;
    let matrix = gen_normal_matrix(nrows, ncols, seed);
    let mut vec = matrix.as_slice().to_vec();
    vec.sort_by(|a, b| a.partial_cmp(b).unwrap());
    let expected: Vec<f64> = (1..=99).map(|x| x as f64 / 100.0).collect();
    let xs: Vec<f64> = vec![
        -2.3263478740408408,
        -2.053748910631823,
        -1.880793608151251,
        -1.75068607125217,
        -1.6448536269514729,
        -1.5547735945968535,
        -1.4757910281791706,
        -1.4050715603096329,
        -1.3407550336902165,
        -1.2815515655446004,
        -1.2265281200366098,
        -1.1749867920660904,
        -1.1263911290388007,
        -1.0803193408149558,
        -1.0364333894937898,
        -0.994457883209753,
        -0.9541652531461943,
        -0.915365087842814,
        -0.8778962950512288,
        -0.8416212335729142,
        -0.8064212470182404,
        -0.7721932141886848,
        -0.7388468491852137,
        -0.7063025628400874,
        -0.6744897501960817,
        -0.643345405392917,
        -0.6128129910166272,
        -0.5828415072712162,
        -0.5533847195556729,
        -0.5244005127080409,
        -0.4958503473474533,
        -0.46769879911450823,
        -0.4399131656732338,
        -0.41246312944140473,
        -0.38532046640756773,
        -0.3584587932511938,
        -0.33185334643681663,
        -0.3054807880993974,
        -0.27931903444745415,
        -0.2533471031357997,
        -0.22754497664114948,
        -0.20189347914185088,
        -0.17637416478086135,
        -0.15096921549677725,
        -0.12566134685507402,
        -0.10043372051146975,
        -0.0752698620998299,
        -0.05015358346473367,
        -0.02506890825871106,
        0.0,
        0.02506890825871106,
        0.05015358346473367,
        0.0752698620998299,
        0.10043372051146988,
        0.12566134685507416,
        0.1509692154967774,
        0.1763741647808612,
        0.20189347914185074,
        0.22754497664114934,
        0.2533471031357997,
        0.27931903444745415,
        0.3054807880993974,
        0.33185334643681663,
        0.3584587932511938,
        0.38532046640756773,
        0.41246312944140495,
        0.4399131656732339,
        0.4676987991145084,
        0.4958503473474532,
        0.5244005127080407,
        0.5533847195556727,
        0.5828415072712162,
        0.6128129910166272,
        0.643345405392917,
        0.6744897501960817,
        0.7063025628400874,
        0.7388468491852137,
        0.7721932141886848,
        0.8064212470182404,
        0.8416212335729143,
        0.8778962950512289,
        0.9153650878428138,
        0.9541652531461943,
        0.994457883209753,
        1.0364333894937898,
        1.0803193408149558,
        1.1263911290388007,
        1.1749867920660904,
        1.2265281200366105,
        1.2815515655446004,
        1.3407550336902165,
        1.4050715603096329,
        1.475791028179171,
        1.5547735945968535,
        1.6448536269514722,
        1.7506860712521692,
        1.8807936081512509,
        2.0537489106318225,
        2.3263478740408408,
    ];
    let cdf_values = interpolated_cdf_sorted(&vec, &xs);
    assert_vec_option_f64_approx_eq(&cdf_values, &expected, 1e-2);
}
