name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: johansen-null-eigenspectra
            asset_name: johansen-null-eigenspectra-linux-x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: johansen-null-eigenspectra
            asset_name: johansen-null-eigenspectra-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: johansen-null-eigenspectra
            asset_name: johansen-null-eigenspectra-macos-arm64

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Install LAPACK (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y liblapack-dev libopenblas-dev gfortran
    
    - name: Install LAPACK (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install openblas lapack
    
    - name: Build
      run: cargo build --release --target ${{ matrix.target }}
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: target/${{ matrix.target }}/release/${{ matrix.binary_name }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Debug artifact structure
      run: |
        echo "Current directory contents:"
        ls -la
        echo "Looking for binary files:"
        find . -name "johansen-null-eigenspectra" -type f
        echo "All files in current directory:"
        find . -type f
    
    - name: Prepare release files
      run: |
        # Create a flat structure for easier file handling
        mkdir -p release-files
        find . -name "johansen-null-eigenspectra" -type f -exec cp {} release-files/ \;
        
        # Rename files to include platform info
        if [ -f "johansen-null-eigenspectra-linux-x86_64/johansen-null-eigenspectra" ]; then
          cp "johansen-null-eigenspectra-linux-x86_64/johansen-null-eigenspectra" "release-files/johansen-null-eigenspectra-linux-x86_64"
        fi
        if [ -f "johansen-null-eigenspectra-macos-x86_64/johansen-null-eigenspectra" ]; then
          cp "johansen-null-eigenspectra-macos-x86_64/johansen-null-eigenspectra" "release-files/johansen-null-eigenspectra-macos-x86_64"
        fi
        if [ -f "johansen-null-eigenspectra-macos-arm64/johansen-null-eigenspectra" ]; then
          cp "johansen-null-eigenspectra-macos-arm64/johansen-null-eigenspectra" "release-files/johansen-null-eigenspectra-macos-arm64"
        fi
        
        echo "Release files prepared:"
        ls -la release-files/
    
    - name: Read release notes
      id: release_notes
      run: |
        # Extract version from tag (remove 'v' prefix)
        VERSION=${GITHUB_REF_NAME#v}
        RELEASE_NOTES_FILE=".github/releases/RELEASE_NOTES_v${VERSION}.md"
        
        echo "Looking for release notes file: $RELEASE_NOTES_FILE"
        
        if [ -f "$RELEASE_NOTES_FILE" ]; then
          echo "Release notes file found, reading content..."
          # Read the file content and handle multiline properly
          {
            echo 'RELEASE_BODY<<EOF'
            cat "$RELEASE_NOTES_FILE"
            echo EOF
          } >> $GITHUB_OUTPUT
        else
          echo "Release notes file not found, using fallback content..."
          {
            echo 'RELEASE_BODY<<EOF'
            echo "## What's New in ${{ github.ref_name }}"
            echo ""
            echo "Release notes for this version are not available."
            echo ""
            echo "### Installation"
            echo ""
            echo "Download the appropriate binary for your platform from the assets below."
            echo ""
            echo "### Usage & Documentation"
            echo ""
            echo "See the [README](https://github.com/${{ github.repository }}/blob/main/README.md) for detailed usage instructions, examples, and documentation."
            echo EOF
          } >> $GITHUB_OUTPUT
        fi
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: release-files/*
        draft: true
        prerelease: false
        name: "Release ${{ github.ref_name }}"
        body: ${{ steps.release_notes.outputs.RELEASE_BODY }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}